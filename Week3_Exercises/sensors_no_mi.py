class Sensor:
    __doc__ = 'Simple Sensor Class'
    
    def __init__(self, ra, acc, sid):
        self._range = ra
        self._accuracy = acc
        self._sensor_id = sid
        
    def get_range(self):
        return self._range
            
    def get_id(self):
        return self._sensor_id
    
class InfraRedSensor(Sensor):
    __doc__ = 'Infra Red Sensor Class'
    
    def __init__(self, ra, acc, sid, mot=30, ty='Passive'):
        super().__init__(ra, acc, sid)
        self._max_op_temp = mot
        self._type = ty
        
    def get_type(self):
        return self._type
        
    def detect_motion(self):
        # Simulating a motion detection event generated by the sensor
        return True
    
class UltraSonicSensor(Sensor):
    __doc__ = 'Ultra Sonic Sensor Class'
    
    def __init__(self, ra, acc, sid, freq=24.0):
        super().__init__(ra, acc, sid)
        self._operating_freq = freq
        
    def get_distance(self):
        # Simulating a distance measured by the sensor (in cm)
        return 12.5

    
class SmartBin:
    __doc__ = 'SmartBin Class'
    
    """Represent smart bin - without using multiple inh."""
    
    # Pass IRSensor and USSensor object to the SmartBin initializer
    # This way, the sensors exist without the bin (aggregation)
    def __init__(self, ir, us, cap=500):
        self._capacity = cap
        self._fill_level = 0
        self._ir_sensor = ir
        self._us_sensor = us

    def get_capacity(self):
        return self._capacity
        
    def get_fill_level(self):
        return self._fill_level
        
    def update_fill_level(self):
        """ Computes the amount of available space in the bin."""
        # We assume here that an empty bin will have 100cm of free space
        # between the bin lid and the bottom when empty.
        self._fill_level = (100 - self._us_sensor.get_distance()) / 100 * self._capacity
        
us_sensor = UltraSonicSensor(100, 1.0, 's1234', 18.6)
ir_sensor = InfraRedSensor(500,0.5, 's8967')
mybin = SmartBin(ir_sensor, us_sensor, 600)
print(mybin.get_capacity())
print(mybin._fill_level)
mybin.update_fill_level()
print(mybin._fill_level)